package myobject;

import Base.MOTestBase;
import Base.MOWebdriver;
import org.testng.annotations.*;

import java.util.Arrays;

import static Base.MOWebdriver.*;
import static org.testng.Assert.*;

/**
 * Created by natalia on 10.02.15.
 *
 * Авария должна успешно добавляться при корректном вводе всех полей - testAdd
 * При выборе типа авариина трубопроводе должна появлять соответстующая дополнительная информация, при сохранении которой данные дожны успешно добавляться
 * Авария должна успешно сохранять изменения при корректном вводе всех полей - testEdit
 * Авария не должна добавляться при незаполненных обязательных полях - testAddEmpty
 * Авария не должна сохранять изменения при незаполненных обязательных полях - testEditEmpty
 * Авария должна успешно удаляться - testDelete
 * TODO НС должен успешно добавляться из аварии/инцидента при корректном вводе всех полей - после модуля инцидентов
 */
public class Crash extends MOTestBase {
    @BeforeClass
    private void isDataPresent() throws Exception{
        if (isListEmpty(new String[] {"Объекты","ТУ","Персонал"}))
            fail("Не хватает данных для проведения теста!");
    }

    @BeforeMethod
    private void goToList() throws Exception{
        goTo("Инциденты","Аварии");
    }

    @Test(priority=1, groups = { "add" })
    public void testAdd() throws Exception
    {
        operation="добавление";
        add();

        legend="Вид аварии";
        select("Вид", "Неконтролируемый взрыв");

        /*legend="Наличие пострадавших";
        switcher("Есть пострадавшие?", "Да");
        input("Из них погибших","7");*/

        legend="Сведения об аварии";
        date("Дата аварии", "01.01.2015");
        input("Время аварии (МСК)","1000");
        //input("Хозяйственное образование", "ТестСозданиеАварииХозОбразование");
        //select("Территориальный орган Ростехнадзора", 5);
        select("Вид надзора", 3);
        //select("Структурное подразделение",0);

        legend="Место аварии";
        input("Производство, участок, цех", data = "аааапро" + curDate());
        //input("Координаты по трассе с привязкой к нас. пункту","ТестСозданиеАварииКоординатыПоТрассе");
        input("Обстоятельства аварии","ТестСозданиеАварииОбстоятельстаАварии");
        //switcher("Вовремя ли подана информация об аварии (в течение 24-х часов)?", "Нет");
        //input("Причина задержки", "ТестСозданиеАварииПричинаЗадержки");

        legend="План ликвидации аварии";
        System.out.print("222");
        select("Ответственный", 3);
        Thread.sleep(300);
        date("Рекомендуемая дата завершения плана","15.02.2016");

        System.out.print("333");
        legend="Объекты, на которых произошла авария";
        select("Объект", 1);
        //select("Техническое устройство",0);
        System.out.print("444");
        //legend="Ликвидирующие организации";
        //button("Добавить");
        //input("Наименование организации","ТестСозданиеАварииЛиквидирующаяОрганизация");

        legend="Кто сообщил об аварии";
        //switcher("Кто сообщил об аварии", "Другое лицо"); //тут надо доделать switcher
        /*input("Фамилия","ТестФамилия");
        input("Имя","ТестИмя");
        input("Отчество","ТестОтчество");
        input("Должность","ТестДолжность");*/

        select("Сотрудник",0);



        Thread.sleep(300);
        System.out.print("444");
        /*legend="Данные лица, принявшего сообщение об аварии";
        input("Ф.И.О.", "ТестСозданиеАварииФИО");
        input("Должность","ТестСозданиеАварииДолжность");
        date("Дата", "01.01.2015");
        input("Время (МСК)", "1100");*/
       ///Thread.sleep(300000);

        save();
        messageResultOfOperation("Авария");

        legend="";
        button("Перейти на страницу аварии");

        goTo("Инциденты","Аварии");
        selectRow(0);
        assertEquals(revisionValue("Место аварии"), data,"Авария не добавлена");
        Thread.sleep(30000);

    }

    @Test(priority=3, groups = { "add","empty" })
    public  void testAddCrashPipeline() throws Exception
    {
        operation="добавление";
        selectRow(0);//выбрать первый элемент
        edit();

        legend="Вид аварии";
        select("Вид", "Авария на объекте трубопровода");
        save();
        legend="";
        button("Продолжить работу с формой");

        goTo("Авария на трубопроводе");

        input("Наименование вещества", "ТестАварияНаТрубопроводеНаименованиеВМ");
        input("Объем утечки","150");

        legend="Информация по трубопроводу";
        input("Марка стали","ТестАварияНаТрубопроводеМаркаСтали");
        input("Диаметр", "80");
        input("Толщина стенки", "15");
        input("Год ввода в эксплуатацию", "1997");
        input("Максимально разрешенное рабочее давление","90");
        input("Давление в момент аварии","78");
        input("Характер аварии", data = "ТестАварияНаТрубопроводеХарактерАварии" + curDate());
        input("Продолжительность истечения до ликвидации аварии","100");
        switcher("Утечка устранена?", "Нет");
        input("Ожидаемый объем утечки до ее устранения", "45");
        input("Время до устранения утечки","6");
        select("Характеристика места утечки", 1);

        legend="После утечки (указать последствия)";
        input("Попадание в водоток","ТестАварияНаТрубопроводеПопаданиеВВодоток");
        input("Впитывание в грунт", "ТестАварияНаТрубопроводеВпитываниеВГрунт");
        input("Попадание в водоносный горизонт", "ТестАварияНаТрубопроводеПопаданиеВВодГоризонт");
        switcher("Удалось ли полностью убрать загрязнения, вызванные утечкой?", "Нет");
        input("Погодные условия", "ТестАварияНаТрубопроводеПогодныеУсловия");
        input("Метод и обстоятельства обнаружения утечки", "ТестАварияНаТрубопроводеМетодОбстоятельстваОбнаруженияУтечки");
        input("Ближайший водоем","ТестАварияНаТрубопроводеБлижайшийВодоем");
        input("Расстояние до водоема", "3");
        input("Воздействие на потребителя","ТестАварияНаТрубопроводеВоздействиеНаПотребителя");
        input("Описание последствий аварии","ТестАварияНаТрубопроводеОписаниеПоследствий");
        input("Возможная причина", "ТестАварияНаТрубопроводеВозможнаяПричина");

        legend="Предпринятые или предпринимаемые меры по ликвидации загрязнений";
        button("Добавить");
        input("Метод очистки", "ТестАварияНаТрубопроводеМетодОчистки");
        date("Дата окончания очистки", "10.01.2015");
        input("Привлекаемый подрядчик", "ТестАварияНаТрубопроводеПривлекаемыйПодрядчик");
        input("Применяемые методы хранения собранной жидкости","ТестАварияНаТрубопроводеПрименяемыеМетодыХранения");

        legend="Вид ремонта";
        button("Добавить");
        input("Вид ремонта", "ТестАварияНаТрубопроводеВидРемонта");
        date("Дата начала ремонта", "04.02.2015");
        date("Дата окончания ремонта", "10.03.2015");

        save();
        messageResultOfOperation("авария");

        legend="";
        button("Перейти на страницу аварии");

        legend="Дополнительные данные";
        goTo("Инциденты", "Аварии");
        selectRow(0);
        goTo("Информация об аварии на объекте трубопровода");
        assertEquals(revisionValue("Характер аварии"), data, "Авария не добавлена");
    }

    @Test(priority=2, groups = { "add","empty" })
    public void testAddEmpty() throws Exception
    {
        expected_result=false;
        add();

        legend="Вид аварии";
        unselect("Вид");

        legend="Сведения об аварии";
        input("Дата аварии", "");
        input("Время аварии (МСК)", "");
        unselect("Вид надзора");

        legend="Место аварии";
        input("Производство, участок, цех", "");
        input("Обстоятельства аварии","");
        switcher("Вовремя ли подана информация об аварии (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "");

        legend="План ликвидации аварии";
        unselect("Ответственный");
        input("Рекомендуемая дата завершения плана","");

        legend="Объекты, на которых произошла авария";
        unselect("Объект");

        legend="Ликвидирующие организации";
        button("Добавить");
        input("Наименование организации","");

        legend="Кто сообщил об аварии";
        unselect("Сотрудник");

        save();
        messageResultOfOperation("авария");

        String[] s=checkEmptyFields();
        assertTrue(s.length == 0, "Есть обязательные поля, не подсвеченные как обязательные:\n" + Arrays.asList(s) + "\n" + (s.length == 0 ? "" : getScreenshot("fail")));
    }

    @Test(priority=3, groups = { "add" })
    public void testAddInvestigation() throws Exception
    {
        operation="добавление";
        selectRow(0);//выбрать первый элемент
        edit();
        goTo("Техническое расследование причин");

        legend="Сведения о техническом расследовании причин аварии";
        input("Заключение о состоянии объекта перед аварией", "ТестСозданиеРасследованияАварииЗаключениеОСостоянии");
        input("Информация о проектных данных объекта и соответствия проекту", data = "ТестСозданиеРасследованияАварииПроектныеДанные");
        switcher("Были ли изменения в проекте", "Да");
        input("Укажите, какие изменения были в проекте", "ТестСозданиеРасследованияАварииИзмененияВПроекте");
        select("Описание режима работы объекта (оборудования) до аварии", 2);
        switcher("Были ли раньше аналогичные аварии на этом объекте", "Да");
        input("Какие аналогичные аварии были на данном объекте", "ТестСозданиеРасследованияАварииАналогчныеАварии");
        input("Соблюдение лицензионных требований", "ТестСозданиеРасследованияАварииСоблЛицТребований");
        input("Соблюдение замечаний и рекомендаций заключения экспертизы (при наличии)", "ТестСозданиеРасследованияАварииСоблЗамечаний");
        input("Соблюдение положения декларации промышленной безопасности (при наличии)","ТестСозданиеРасследованияАварииСоблПоложения");

        legend="Обстоятельства аварии";
        input("Обстоятельства аварии, сценарий развития","ТестСозданиеРасследованияАварииОбстоятельства");
        input("Факторы, приведшие к  аварии","ТестСозданиеРасследованияАварииФакторы");

        legend="Причины аварии";
        input("Технические причины аварии", "ТестСозданиеРасследованияАварииТехПричины");
        input("Организационные причины аварии","ТестСозданиеРасследованияАварииОргПричины");
        input("Прочие причины аварии","ТестСозданиеРасследованияАварииПрочПричины");

        legend="Последствия аварии";
        input("Повреждения ТУ", "ТестСозданиеРасследованияАварииПоврежденияТУ");
        input("Повреждения ЗиС","ТестСозданиеРасследованияАварииПоврежденияЗиС");
        input("Разрушение объектов инфраструктуры","ТестСозданиеРасследованияАварииРазрушениеИнфраструктуры");

        legend="Ущерб от аварии";
        input("Расходы на ликвидацию последствий аварии","45000");
        input("Прямые потери","60000");
        input("Экологический ущерб","20000");
        input("Потери от выбытия трудовых ресурсов","100000");
        input("Длительность простоя","85");
        select("Единица измерения", "Часы");
        date("Дата акта", "21.05.2015");
        input("Номер акта", "ТестСозданиеРасследованияАварииНомерАкта");
        input("Номер приказа по расследованию","ТестСозданиеРасследованияАварииНомерПриказа");
        date("Дата приказа по расследованию", "21.05.2015");
        input("Выводы комиссии по раследованию причин аварии", "ТестСозданиеРасследованияАварииВыводы");
        input("Принятые меры наказания","ТестСозданиеРасследованияАварииПринятыеМеры");
        switcher("Направлялся ли материал в следственные органы?", "Да");
        date("Дата направления материалов","20.06.2015");

        legend="Состав комиссии тех. расследования причин аварии";
        label("Сотрудник");
        select("Сотрудник", 5);
        select("Тип", "Председатель");

        legend="Нормативные документы, требования которых были нарушены";
        button("Добавить");
        select("Нормативный документ", 1);
        input("Номер статьи документа", "64");
        input("Текст статьи документа", "ТестСозданиеРасследованияАварииТекстСтатьи");

        legend="Мероприятия по анализу аварии";
        button("Добавить");
        input("Описание мероприятия", "ТестСозданиеРасследованияАварииМероприятиеПоАнализу");

        save();
        messageResultOfOperation("расследование, комиссия аварии");

        legend="";
        button("Перейти на страницу аварии");

        goTo("Инциденты","Аварии");
        selectRow(0);
        goTo("Данные о расследовании причин аварии");//открываем список
        assertEquals(revisionValue("Информация о проектных данных объекта и соответствий проекту"), data, "Данные о расследовании аварии не добавлены");
    }

    @Test(priority=3, groups = { "add","empty" })
    public void testAddResponsibleEmployee() throws Exception
    {
        operation="добавление";
        selectRow(0);
        edit();
        goTo("Ответственные за нарушения");

        legend="Заключение о лицах, ответственных за допущенные нарушения требований промышленной безопасности";
        button("Добавить ответственного");
        select("Сотрудник", 0);

        legend="Нормативные документы, требования которых были нарушены";
        button("Добавить");
        select("Нормативный документ", 1);
        input("Номер статьи документа", data = "19");
        input("Текст статьи документа", data1 = "ТестСозданиеОтветственныхАварииТекстСтатьи" + curDate());

        save();
        messageResultOfOperation("Ответственные за нарушения аварии");

        legend="";
        button("Перейти на страницу аварии");

        //      legend="Дополнительные данные";
        //       goTo("Инциденты", "Несчастные случаи");
        //       selectRow(0);
        //       goTo("Лица, ответственные за допущенные нарушения требований промышленной безопасности");
//        assertEquals(revisionValue("№ пункта: " + data),  data1,"Данные об ответственных за НС не добавлены"); // из-за кривой верстки не получается достать значение - проверить сложно
    }

    @Test(priority=4, groups = { "edit" })
    public void testEdit() throws Exception
    {
        operation="изменение";
        selectRow(0);
        edit();

        legend="Вид аварии";
        select("Вид", "Неконтролируемый взрыв");

        legend="Наличие пострадавших";
        switcher("Есть пострадавшие?", "Да");
        input("Из них погибших","7");

        legend="Сведения об аварии";
        date("Дата аварии", "01.01.2015");
        input("Время аварии (МСК)","1000");
        input("Хозяйственное образование", "ТестСозданиеАварииХозОбразование");
        select("Территориальный орган Ростехнадзора", 5);
        select("Вид надзора", 3);
        select("Структурное подразделение", "Плавильный цех");

        legend="Место аварии";
        input("Производство, участок, цех", data = "ТестСозданиеАварииПроизводствоУчастокЦех");
        input("Координаты по трассе с привязкой к нас. пункту", "ТестСозданиеАварииКоординатыПоТрассе");
        input("Обстоятельства аварии","ТестСозданиеАварииОбстоятельстаАварии");
        switcher("Вовремя ли подана информация об аварии (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "ТестСозданиеАварииПричинаЗадержки");

        legend="Объекты, на которых произошла авария";
        select("Объект", 0);
        select("Техническое устройство", 0);

        legend="Ликвидирующие организации";
        input("Наименование организации","ТестСозданиеАварииЛиквидирующаяОрганизация");

        legend="Кто сообщил об аварии";
        select("Сотрудник", 0);

        legend="Данные лица, принявшего сообщение об аварии";
        input("Ф.И.О.", "ТестСозданиеАварииФИО");
        input("Должность","ТестСозданиеАварииДолжность");
        date("Дата", "01.01.2015");
        input("Время (МСК)", "1100");

        save();
        messageResultOfOperation("Авария");

        legend="";
        button("Перейти на страницу аварии");

        goTo("Инциденты","Аварии");
        selectRow(0);
        assertEquals(revisionValue("Место аварии"), data,"Авария не добавлена");
    }

    @Test(priority=4, groups = { "edit" })
    public void testEditEmpty() throws Exception
    {
        expected_result=false;
        selectRow(0);
        edit();

        legend="Вид аварии";
        unselect("Вид");

        legend="Сведения об аварии";
        input("Дата аварии", "");
        input("Время аварии (МСК)", "");
        unselect("Вид надзора");

        legend="Место аварии";
        input("Производство, участок, цех", "");
        input("Обстоятельства аварии","");
        switcher("Вовремя ли подана информация об аварии (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "");

        legend="Объекты, на которых произошла авария";
        unselect("Объект");

        legend="Ликвидирующие организации";
        button("Добавить");
        input("Наименование организации","");

        legend="Кто сообщил об аварии";
        unselect("Сотрудник");

        save();
        messageResultOfOperation("Авария");

        String[] s=checkEmptyFields();
        assertTrue(s.length == 0, "Есть обязательные поля, не подсвеченные как обязательные:\n" + Arrays.asList(s) + "\n" + (s.length == 0 ? "" : getScreenshot("fail")));
    }

    @Test(priority=5, groups = { "delete" })
    public void testDelete() throws Exception
    {
        operation="удаление";
        selectRow(0);
        legend="Оперативное сообщение";
        data = revisionValue("Место аварии (производство, участок, цех)");
        delete();

        messageResultOfOperation("Авария");

        goTo("Инциденты","Аварии");
        if (!MOWebdriver.isListEmpty()) {
            selectRow(0);
            assertNotEquals(revisionValue("Место аварии (производство, участок, цех)"), data, "Авария не удалена");
        }
    }
}
