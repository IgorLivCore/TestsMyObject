package myobject; /**
 * Created by natalia on 13.01.15.
 *
 * НС должен успешно добавляться из левого меню при корректном вводе всех полей - testAdd
 * НС должен успешно сохранять изменения при корректном вводе всех полей - testEdit
 * НС не должен добавляться при незаполненных обязательных полях - testAddEmpty
 * НС не должен сохранять изменения при незаполненных обязательных полях - testEditEmpty
 * НС должен успешно удаляться - testDelete
 * TODO НС должен успешно добавляться из аварии/инцидента при корректном вводе всех полей - после модуля инцидентов
 */

import Base.MOTestBase;
import Base.MOWebdriver;
import org.openqa.selenium.*;
import static org.testng.Assert.*;
import org.testng.annotations.*;
import java.util.Arrays;
import static Base.MOWebdriver.*;

public class Accident extends MOTestBase {
    @BeforeClass
    private void isDataPresent() throws Exception{
        if (isListEmpty(new String[] {"Объекты","ТУ","Персонал"}))
            fail("Не хватает данных для проведения теста!");
    }

    @BeforeMethod
    private void goToList() throws Exception{
        goTo("Инциденты","Несчастные случаи");
    }

    @Test(priority=1, groups = { "add" })
    public void testAdd() throws Exception
    {
        operation="добавление";
        add();

        legend="Вид НС";
        select("Вид", 2);

        legend="Сведения о НС";
        date("Дата НС", "01.01.2015");
        input("Время НС (МСК)", "1000");
        input("Хозяйственное образование", "ТестСозданиеНСХозОбразование");
        select("Территориальный орган Ростехнадзора", 5);
        select("Вид надзора", 3);
        select("Структурное подразделение", 1);

        input("Место НС", data = "ТестСозданиеНСМестоНС" + curDate());
        input("Обстоятельства НС", "ТестСозданиеНСОбстоятельстаНС");
        switcher("Вовремя ли подана информация о НС (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "ТестСозданиеНСПричинаЗадержки");

        legend="План ликвидации НС";
        select("Ответственный", 0);
        date("Рекомендуемая дата завершения плана", "15.02.2016");

        legend="Объекты, на которых произошел НС";
        select("Объект", "Плавильный цех");
        select("Техническое устройство", 1);

        legend="Кто сообщил о НС";
        label("Другое лицо");
        input("Фамилия","ТестСозданиеНСФамилияСообщившего");
        input("Имя","ТестСозданиеНСИмяСообщившего");
        input("Отчество","ТестСозданиеНСОтчествоСообщившего");
        input("Должность","ТестСозданиеНСДолжностьСообщившего");
        input("Телефон","2543269");

        legend="Данные лица, принявшего сообщение о НС";
        input("Ф.И.О.", "ТестСозданиеНСФИО");
        input("Должность", "ТестСозданиеНСДолжность");
        date("Дата", "01.01.2015");
        input("Время (МСК)", "1100");

        save();
        messageResultOfOperation("НС");

        legend="";
        button("Перейти на страницу несчастного случая");

        goTo("Инциденты", "Несчастные случаи");
        selectRow(0);
        assertEquals(revisionValue("Место НС"), data,"НС не добавлен");
    }

    @Test(priority=3, groups = { "add","empty" })
    public void testAddAffectedEmployee() throws Exception  //вкладка пострадавшие
    {
        operation="добавление";
        selectRow(0);
        edit();
        goTo("Пострадавшие");

        legend="";
        select("Сотрудник", 1);
        select("Тяжесть повреждения здоровья", 2);

        legend="Характер повреждения здоровья";
        select("Характер травмы / заболевания", data = "Растяжение связок, сухожилий");
        select("Пострадавшие части тела", "Рука");
        select("Вид опасного контакта", "Удар (чем-то)");
        select("Опасная энергия или вещество, с которым был контакт", "Перемещаемое оборудование/материалы (грузоподъемными механизмами, вручную и т.п.)");

        save();
        messageResultOfOperation("НС");

        legend="";
        button("Перейти на страницу несчастного случая");

        goTo("Инциденты", "Несчастные случаи");
        selectRow(0);
        goTo("Сведения о пострадавших");
        assertEquals(revisionValue("Характер травмы / заболевания"), data + ",","Сведения о пострадавших НС не добавлены");
    }

    @Test(priority=3, groups = { "add","empty" })
    public void testAddInvestigation() throws Exception
    {
        operation="добавление";
        selectRow(0);
        edit();
        goTo("Расследование причин");

        legend="Сведения о расследовании причин несчастного случая";
        switcher("Были ли раньше аналогичные НС на этом объекте", "Да");
        input("Какие аналогичные НС были на данном объекте", "ТестСозданиеРасследованияНСАналогичныеНС");

        legend="Обстоятельства НС";
        input("Обстоятельства НС, сценарий развития", data = "ТестСозданиеРасследованияНСОбстоятельства" + curDate());

        legend="Факторы, приведшие к НС";
        select("Человеческие факторы","Неуместная агрессия");
        select("Факторы работы","Неадекватная оценка готовности к работе");

        legend="Непосредственные причины";
        select("Опасные условия","Незаточенные инструменты");
        select("Опасные действия","Неправильный подъем тяжести вручную");

        legend="Последствия НС";
        input("Повреждения ТУ","ТестСозданиеРасследованияНСПоврежденияТУ");
        input("Повреждения ЗиС","ТестСозданиеРасследованияНСПоврежденияЗиС");
        input("Разрушение объектов инфраструктуры","ТестСозданиеРасследованияНСПоврежденияРазрушениеИнфраструктуры");

        legend="Ущерб от НС";
        input("Расходы на ликвидацию последствий НС","10000");
        input("Прямые потери","200000");
        input("Экологический ущерб","145000");
        input("Потери от выбытия трудовых ресурсов","65000");
        input("Длительность простоя","28");
        select("Единица измерения", 2);

        date("Дата акта", "01.06.2015");
        input("Номер акта", "А459");
        input("Номер приказа по расследованию", "267");
        date("Дата приказа по расследованию", "15.03.2015");
        input("Выводы комиссии по раследованию причин НС", "ТестСозданиеРасследованияНСВыводыКомиссии");
        input("Принятые меры наказания", "ТестСозданиеРасследованияНСМерыНаказания");
        switcher("Направлялся ли материал в следственные органы?", "Да");
        date("Дата направления материалов", "01.04.2015");

        legend="Состав комиссии по расследованию причин НС";
        label("Сотрудник");
        select("Сотрудник", 5);
        select("Тип", "Председатель");

        legend="Нормативные документы, требования которых были нарушены";
        button("Добавить");
        select("Нормативный документ", 2);
        input("Номер статьи документа", "64");
        input("Текст статьи документа", "ТестСозданиеРасследованияНСТекстСтатьи");

        legend="Мероприятия по анализу НС";
        button("Добавить");
        input("Описание мероприятия", "ТестСозданиеРасследованияНСМероприятиеПоАнализу");

        save();
        messageResultOfOperation("Расследование НС");

        legend="";
        button("Перейти на страницу несчастного случая");

        legend="Дополнительные данные";
        goTo("Инциденты", "Несчастные случаи");
        selectRow(0);
        goTo("Данные о расследовании причин НС");
        assertEquals(revisionValue("Обстоятельства НС"), data,"Данные о расследовании НС не добавлены");
    }

    @Test(priority=3, groups = { "add","empty" })
    public void testAddResponsibleEmployee() throws Exception
    {
        operation="добавление";
        selectRow(0);
        edit();
        goTo("Ответственные за нарушения");

        legend="Заключение о лицах, ответственных за допущенные нарушения требований промышленной безопасности";
        button("Добавить ответственного");
        select("Сотрудник", 0);

        legend="Нормативные документы, требования которых были нарушены";
        button("Добавить");
        select("Нормативный документ", 2);
        input("Номер статьи документа", data = "18");
        input("Текст статьи документа", data1 = "ТестСозданиеОтветственныхНСТекстСтатьи" + curDate());

        save();
        messageResultOfOperation("Ответственные за нарушения НС");

        legend="";
        button("Перейти на страницу НС");

        /* из-за кривой верстки не получается достать значение - проверить сложно
        legend="Дополнительные данные";
        goTo("Инциденты", "Несчастные случаи");
        selectRow(0);
        goTo("Лица, ответственные за допущенные нарушения требований промышленной безопасности");
        assertEquals(revisionValue("№ пункта: " + data),  data1,"Данные об ответственных за НС не добавлены");
        */
    }

    @Test(priority=2, groups = { "add","empty" })
    public void testAddEmpty() throws Exception
    {
        expected_result=false;
        add();

        legend="Вид НС";
        unselect("Вид");

        legend="Сведения о НС";
        input("Дата НС", "");
        input("Время НС (МСК)", "");
        unselect("Вид надзора");

        //legend="Место НС";
        input("Место НС", "");
        input("Обстоятельства НС", "");
        switcher("Вовремя ли подана информация о НС (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "");

        legend="План ликвидации НС";
        unselect("Ответственный");
        input("Рекомендуемая дата завершения плана", "");

        legend="Объекты, на которых произошел НС";
        unselect("Объект");

        legend="Кто сообщил о НС";
        label("Сотрудник");
        unselect("Сотрудник");

        save();
        messageResultOfOperation("НС");

        String[] s=checkEmptyFields();
        assertTrue(s.length == 0, "Есть обязательные поля, не подсвеченные как обязательные:\n" + Arrays.asList(s) + "\n" + (s.length == 0 ? "" : getScreenshot("fail")));
    }

    @Test(priority=2, groups = { "edit" })
    public void testEdit() throws Exception
    {
        operation="изменение";
        selectRow(0);
        edit();

        legend="Вид НС";
        select("Вид", 3);

        legend="Сведения о НС";
        date("Дата НС", "01.01.2015");
        input("Время НС (МСК)", "1000");
        input("Хозяйственное образование", "ТестИзменениеНСХозОбразование");
        select("Территориальный орган Ростехнадзора", 3);
        select("Вид надзора", 5);
        select("Структурное подразделение", 0);

        input("Место НС", data = "ТестИзменениеНСМестоНС" + curDate());
        input("Обстоятельства НС", "ТестИзменениеНСОбстоятельстаНС");
        switcher("Вовремя ли подана информация о НС (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "ТестИзменениеНСПричинаЗадержки");

        legend="Объекты, на которых произошел НС";
        select("Объект", "Склад ВМ");
        select("Техническое устройство", 0);

        legend="Кто сообщил о НС";
        label("Сотрудник");
        select("Сотрудник", 0);

        legend="Данные лица, принявшего сообщение о НС";
        input("Ф.И.О.", "ТестИзменениеНСФИО");
        input("Должность", "ТестИзменениеНСДолжность");
        date("Дата", "01.01.2015");
        input("Время (МСК)", "1100");

        save();
        messageResultOfOperation("НС");

        legend="";
        button("Перейти на страницу несчастного случая");

        goTo("Инциденты", "Несчастные случаи");
        selectRow(0);
        assertEquals(revisionValue("Место НС"), data,"НС не добавлен");
    }

    @Test(priority=3, groups = { "edit","empty" })
    public void testEditEmpty() throws Exception
    {
        expected_result = false;
        selectRow(0);
        edit();

        legend="Вид НС";
        unselect("Вид");

        legend="Сведения о НС";
        input("Дата НС", "");
        input("Время НС (МСК)", "");
        unselect("Вид надзора");

        input("Место НС", "");
        input("Обстоятельства НС", "");
        switcher("Вовремя ли подана информация о НС (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "");

        legend="Объекты, на которых произошел НС";
        unselect("Объект");

        legend="Кто сообщил о НС";
        label("Сотрудник");
        unselect("Сотрудник");

        save();
        messageResultOfOperation("НС");

        String[] s=checkEmptyFields();
        assertTrue(s.length == 0, "Есть обязательные поля, не подсвеченные как обязательные:\n" + Arrays.asList(s) + "\n" + (s.length == 0 ? "" : getScreenshot("fail")));
    }

    @Test(priority=4, groups = { "delete" })
    public void testDelete() throws Exception
    {
        operation="удаление";
        selectRow(0);
        data = driver.findElement(By.xpath("//node()[contains(text(),\"Несчастный случай:\")]")).getText();
        delete();

        messageResultOfOperation("НС");

        goTo("Инциденты","Несчастные случаи");
        if (!MOWebdriver.isListEmpty()) {
            selectRow(0);
            assertNotEquals(driver.findElement(By.xpath("//node()[contains(text(),\"Несчастный случай:\")]")).getText(), data, "НС не удален!");
        }
    }
}
