package myobject;

import Base.MOTestBase;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import java.util.Arrays;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;
import static Base.MOWebdriver.*;
import static org.testng.Assert.fail;

/**
 * Created by natalia on 09.02.15.
 *
 * Предприятие должно успешно сохранять изменения при вводе всех данных корректно (ИП) - testEditIP
 * Предприятие должно успешно сохранять изменения при вводе всех данных корректно (ЮЛ) - testEditUL
 * Предприятие не должно сохранять изменения при незаполненных обязательных полях (ИП) - testEditEmptyIP
 * Предприятие не должно сохранять изменения при незаполненных обязательных полях (ЮЛ) - testEditEmptyUL
 */


public class Company extends MOTestBase {
    @BeforeMethod
    private void preparation() throws Exception{
        goTo("Общее","Предприятие");
    }

    @Test(priority = 1, groups = {"edit"})
    public void testEditIP() throws Exception {
        operation = "изменение";
        String tmp;
        edit();

        select("Форма организации", "Индивидуальный предприниматель");

        legend = "Индивидуальный предприниматель";
        data = "ИП ";
        input("Фамилия", tmp = "ТестИзменениеПредприятияФамилия" + curDate());
        data += tmp + " ";
        input("Имя", tmp = "ТестИзменениеПредприятияИмя");
        data += tmp + " ";
        input("Отчество", tmp = "ТестИзменениеПредприятияОтчество");
        data += tmp;
        input("ИНН ИП", "123456789012");
        input("ОГРНИП", "123456789010111");
        input("ОКПО", "1234567890");
        input("ОКОГУ", "1234560");
        select("Тип документа, удостоверяющего личность", "Паспорт гражданина Российской Федерации");
        input("Серия документа", "ТестИзменениеПредприятияСерияДокумента");
        input("Номер документа", "ТестИзменениеПредприятияНомерДокумента");
        input("Дата выдачи", "01.01.1990");
        input("Кем выдан", "ТестИзменениеПредприятияКемВыдан");

        legend = "";
        input("Идентификатор организации в подсистеме КСИ «Ростехнадзор»", "123456");
        select("Территориальный орган Ростехнадзора", 1);
        input("Почтовый индекс", "123456");
        input("Местонахождение (юридический адрес) предприятия", "ТестИзменениеПредприятияИПСтранаГородУлица", "20", "10");
        input("КЛАДР", "1234567890");
        input("Код ОКАТО", "12345678910");
        input("Код OKTMO", "12569712569");
        input("КПП", "123456789");
        input("Руководитель (ФИО)", "ТестИзменениеПредприятияРуководитель");
        input("Должность руководителя", "ТестИзменениеПредприятияДолжностьРуководителя");
        input("Телефон", "7-321-0987654");
        input("Факс", "7-321-0987654");
        input("Электронная почта", "testCompany" + curDate() + "@test.test");

        save();

        messageResultOfOperation("предприятие");

        goTo("Общее","Предприятие");

        legend="Основные данные";
        assertEquals(revisionValue("Наименование"), data, "Данные предприятия не изменены");
    }

    @Test(priority = 3, groups = {"edit"})
    public void testEditUL() throws Exception
    {
        operation="изменение";
        edit();

        select("Форма организации", "Юридическое лицо");
        legend="Юридическое лицо";
        tree("Правовая форма", "Юридические лица, являющиеся коммерческими организациями");
        tree("Правовая форма", "Унитарные предприятия");
        tree("Правовая форма", "Унитарные предприятия, основанные на праве оперативного управления");
        input("Полное наименование юридического лица", data = "ТестИзменениеПредприятияПолноеНаименованиеЮЛ " + curDate());
        input("Сокращенное наименование юридического лица","ТИППНЮЛ");
        input("Фирменное наименование юридического лица","ТестИзменениеПредприятияФирменноеНаименование");
        input("ИНН","1234567891");
        input("ОГРН","1234567891011");
        input("ОКПО", "1234567891");
        input("ОКОГУ","1234567");

        legend = "";
        input("Идентификатор организации в подсистеме КСИ «Ростехнадзор»", "123456");
        select("Территориальный орган Ростехнадзора", 5);
        input("Почтовый индекс", "654321");
        input("Местонахождение (юридический адрес) предприятия", "ТестИзменениеПредприятияЮЛСтранаГородУлица", "10", "20");
        input("КЛАДР", "1234567890");
        input("Код ОКАТО", "12345678910");
        input("Код OKTMO", "12569712569");
        input("КПП", "123456789");
        input("Руководитель (ФИО)", "ТестИзменениеПредприятияРуководитель");
        input("Должность руководителя", "ТестИзменениеПредприятияДолжностьРуководителя");
        input("Телефон", "7-123-4567890");
        input("Факс", "7-123-4567890");
        input("Электронная почта", "testCompany" + curDate() + "@test.test");

        save();

        messageResultOfOperation("предприятие");

        goTo("Общее","Предприятие");

        legend="Основные данные";
        assertEquals(revisionValue("Полное наименование юридического лица"), data,"Данные предприятия не изменены");
    }

    @Test(priority = 2, groups = {"empty"})
    public void testEditEmptyIP() throws Exception
    {
        expected_result = false;

        edit();

        select("Форма организации", "Индивидуальный предприниматель");

        legend = "Индивидуальный предприниматель";

        input("Фамилия", "");
        input("Имя", "");
        input("Отчество", "");

        input("ИНН ИП", "");
        input("ОГРНИП", "");
        input("ОКПО", "");
        input("ОКОГУ", "");
        unselect("Тип документа, удостоверяющего личность");
        input("Серия документа", "");
        input("Номер документа", "");
        input("Дата выдачи", "");
        input("Кем выдан", "");

        legend = "";
        input("Почтовый индекс", "");
        input("Местонахождение (юридический адрес) предприятия", "", "", "");
        input("Код ОКАТО", "");
        input("Телефон", "--");

        save();

        messageResultOfOperation("предприятие");

        String[] s=checkEmptyFields();
        assertTrue(s.length==0,"Есть обязательные поля, не подсвеченные как обязательные:\n" + Arrays.asList(s) + "\n" + (s.length==0 ? "" : getScreenshot("fail")));
    }

    @Test(priority = 4, groups = {"empty"})
    public void testEditEmptyUL() throws Exception
    {
        expected_result=false;
        edit();

        select("Форма организации", "Юридическое лицо");
        legend="Юридическое лицо";
        tree("Правовая форма", "");
        input("Полное наименование юридического лица", "");
        input("Сокращенное наименование юридического лица", "");
        input("ИНН","");
        input("ОГРН","");
        input("ОКПО","");
        input("ОКОГУ","");

        legend="";
        input("Почтовый индекс", "");
        input("Местонахождение (юридический адрес) предприятия", "", "", "");
        input("Код ОКАТО","");
        input("Телефон", "--");

        save();

        messageResultOfOperation("предприятие");
        String[] s=checkEmptyFields();
        assertTrue(s.length==0,("Есть обязательные поля, не подсвеченные как обязательные:\n" + Arrays.asList(s) + "\n" + (s.length==0 ? "" : getScreenshot("fail"))));
    }
}
