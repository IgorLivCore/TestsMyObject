package myobject;

import Base.MOTestBase;
import Base.MOWebdriver;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import java.util.Arrays;
import static Base.MOWebdriver.*;

import static org.testng.Assert.*;

/**
 * Created by natalia on 02.04.15.
 */
public class Incident extends MOTestBase {
    @BeforeClass
    private void isDataPresent() throws Exception{
        if (isListEmpty(new String[] {"Объекты","ТУ","Персонал"}))
            fail("Не хватает данных для проведения теста!");
    }

    @BeforeMethod
    private void goToList() throws Exception{
        goTo("Инциденты","Инциденты");
    }

    @Test(priority=1, groups = { "add" })
    public void testAdd() throws Exception
    {
        operation="добавление";
        add();

        legend="Вид инцидента";
        select("Вид", "Неконтролируемый взрыв");

        legend="Наличие пострадавших";
        switcher("Есть пострадавшие?", "Да");
        input("Из них погибших", "7");

        legend="Сведения об инциденте";
        date("Дата инцидента", "01.01.2015");
        input("Время инцидента (МСК)", "1000");
        input("Хозяйственное образование", "ТестСозданиеИнцидентаХозОбразование");
        select("Территориальный орган Ростехнадзора", 5);
        select("Вид надзора", 3);
        select("Структурное подразделение", 1);

        legend="Место инцидента";
        input("Производство, участок, цех", data = "ТестСозданиеИнцидентаПроизводствоУчастокЦех" + curDate());
        input("Координаты по трассе с привязкой к нас. пункту", "ТестСозданиеИнцидентаКоординатыПоТрассе");
        input("Обстоятельства инцидента","ТестСозданиеИнцидентаОбстоятельстаИнцидента");
        switcher("Вовремя ли подана информация об инциденте (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "ТестСозданиеИнцидентаПричинаЗадержки");

        legend="План ликвидации инцидента";
        select("Ответственный", 3);
        date("Рекомендуемая дата завершения плана", "15.02.2016");

        legend="Объекты, на которых произошел инцидент";
        select("Объект", 0);
        select("Техническое устройство", 0);

        legend="Ликвидирующие организации";
        button("Добавить");
        input("Наименование организации", "ТестСозданиеИнцидентаЛиквидирующаяОрганизация");

        legend="Кто сообщил об инциденте";
        label("Сотрудник");
        select("Сотрудник", 0);

        legend="Данные лица, принявшего сообщение об инциденте";
        input("Ф.И.О.", "ТестСозданиеИнцидентаФИО");
        input("Должность", "ТестСозданиеИнцидентаДолжность");
        date("Дата", "01.01.2015");
        input("Время (МСК)", "1100");

        save();
        messageResultOfOperation("инцидент");

        legend="";
        button("Перейти на страницу инцидента");

        goTo("Инциденты", "Инцидент");
        selectRow(0);
        assertEquals(revisionValue("Место инцидента"), data,"Инцидент не добавлен");
    }

    @Test(priority=2, groups = { "empty","add" })
    public void testAddEmpty() throws Exception
    {
        expected_result=false;
        add();

        legend="Вид инцидента";
        unselect("Вид");


        legend="Сведения об инциденте";
        input("Дата инцидента", "");
        input("Время инцидента (МСК)", "");
        unselect("Вид надзора");

        legend="Место инцидента";
        input("Производство, участок, цех", "");
        input("Обстоятельства инцидента", "");
        switcher("Вовремя ли подана информация об инциденте (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "");

        legend="План ликвидации инцидента";
        unselect("Ответственный");
        input("Рекомендуемая дата завершения плана", "");

        legend="Объекты, на которых произошел инцидент";
        unselect("Объект");

        legend="Ликвидирующие организации";
        button("Добавить");
        input("Наименование организации", "");

        save();
        messageResultOfOperation("инцидент");

        String[] s=checkEmptyFields();
        assertTrue(s.length == 0, "Есть обязательные поля, не подсвеченные как обязательные:\n" + Arrays.asList(s) + "\n" + (s.length == 0 ? "" : getScreenshot("fail")));
    }

    @Test(priority=3, groups = { "add" })
    public void testAddInvestigation() throws Exception
    {
        operation="добавление";
        goTo("Инциденты","Инциденты");
        selectRow(0);//выбрать первый элемент
        edit();
        goTo("Техническое расследование причин");

        legend="Сведения о техническом расследовании причин инцидента";
        input("Заключение о состоянии объекта перед инцидентом", "ТестСозданиеРасследованияИнцидентаЗаключениеОСостоянии");
        input("Информация о проектных данных объекта и соответствия проекту", data = "ТестСозданиеРасследованияИнцидентаПроектныеДанные");
        switcher("Были ли изменения в проекте", "Да");
        input("Укажите, какие изменения были в проекте", "ТестСозданиеРасследованияИнцидентаИзмененияВПроекте");
        select("Описание режима работы объекта (оборудования) до инцидента", 2);
        switcher("Были ли раньше аналогичные инциденты на этом объекте", "Да");
        input("Какие аналогичные инциденты были на данном объекте", "ТестСозданиеРасследованияИнцидентаАналогчныеАварии");
        input("Соблюдение лицензионных требований", "ТестСозданиеРасследованияИнцидентаСоблЛицТребований");
        input("Соблюдение замечаний и рекомендаций заключения экспертизы (при наличии)", "ТестСозданиеРасследованияИнцидентаСоблЗамечаний");
        input("Соблюдение положения декларации промышленной безопасности (при наличии)","ТестСозданиеРасследованияИнцидентаСоблПоложения");

        legend="Обстоятельства инцидента";
        input("Обстоятельства инцидента, сценарий развития","ТестСозданиеРасследованияИнцидентаОбстоятельства");
        input("Факторы, приведшие к  инциденту","ТестСозданиеРасследованияИнцидентаФакторы");

        legend="Причины инцидента";
        input("Технические причины инцидента", "ТестСозданиеРасследованияИнцидентаТехПричины");
        input("Организационные причины инцидента","ТестСозданиеРасследованияИнцидентаОргПричины");
        input("Прочие причины инцидента","ТестСозданиеРасследованияИнцидентаПрочПричины");

        legend="Последствия инцидента";
        input("Повреждения ТУ", "ТестСозданиеРасследованияИнцидентаПоврежденияТУ");
        input("Повреждения ЗиС","ТестСозданиеРасследованияИнцидентаПоврежденияЗиС");
        input("Разрушение объектов инфраструктуры","ТестСозданиеРасследованияИнцидентаРазрушениеИнфраструктуры");

        legend="Ущерб от инцидента";
        input("Расходы на ликвидацию последствий инцидента","45000");
        input("Прямые потери","60000");
        input("Экологический ущерб","20000");
        input("Потери от выбытия трудовых ресурсов","100000");
        input("Длительность простоя","85");
        select("Единица измерения", "Часы");
        date("Дата акта", "21.05.2015");
        input("Номер акта", "ТестСозданиеРасследованияИнцидентаНомерАкта");
        input("Номер приказа по расследованию","ТестСозданиеРасследованияИнцидентаНомерПриказа");
        date("Дата приказа по расследованию", "21.05.2015");
        input("Выводы комиссии по раследованию причин инцидента", "ТестСозданиеРасследованияИнцидентаВыводы");
        input("Принятые меры наказания","ТестСозданиеРасследованияИнцидентаПринятыеМеры");
        switcher("Направлялся ли материал в следственные органы?", "Да");
        date("Дата направления материалов","20.06.2015");

        legend="Состав комиссии тех. расследования причин инцидента";
        label("Сотрудник");
        select("Сотрудник", 5);
        select("Тип", "Председатель");

        legend="Нормативные документы, требования которых были нарушены";
        button("Добавить");
        select("Нормативный документ", 2);
        input("Номер статьи документа", "64");
        input("Текст статьи документа", "ТестСозданиеРасследованияИнцидентаТекстСтатьи");

        legend="Мероприятия по анализу инцидента";
        button("Добавить");
        input("Описание мероприятия", "ТестСозданиеРасследованияИнцидентаМероприятиеПоАнализу");

        save();
        messageResultOfOperation("расследование, комиссия аварии");

        legend="";
        button("Перейти на страницу инцидента");

        goTo("Инциденты","Инциденты");
        selectRow(0);
        goTo("Данные о расследовании причин инцидента");//открываем список
        assertEquals(revisionValue("Информация о проектных данных объекта и соответствий проекту"), data, "Данные о расследовании инцидента не добавлены");
    }

    @Test(priority=3, groups = { "add","empty" })
    public void testAddResponsibleEmployee() throws Exception
    {
        operation="добавление";
        selectRow(0);
        edit();
        goTo("Ответственные за нарушения");

        legend="Заключение о лицах, ответственных за допущенные нарушения требований промышленной безопасности";
        button("Добавить ответственного");
        select("Сотрудник", 0);

        legend="Нормативные документы, требования которых были нарушены";
        button("Добавить");
        select("Нормативный документ", 2);
        input("Номер статьи документа", data = "19");
        input("Текст статьи документа", data1 = "ТестСозданиеОтветственныхИнцидентаТекстСтатьи" + curDate());

        save();
        messageResultOfOperation("Ответственные за нарушения инцидента");

        legend="";
        button("Перейти на страницу инцидента");

        //      legend="Дополнительные данные";
        //       goTo("Инциденты", "Несчастные случаи");
        //       selectRow(0);
        //       goTo("Лица, ответственные за допущенные нарушения требований промышленной безопасности");
//        assertEquals(revisionValue("№ пункта: " + data),  data1,"Данные об ответственных за НС не добавлены"); // из-за кривой верстки не получается достать значение - проверить сложно
    }

    @Test(priority=2, groups = { "edit" })
    public void testEdit() throws Exception
    {
        operation="изменение";
        selectRow(0);
        edit();

        legend="Вид инцидента";
        select("Вид", "Повреждение ГТС");

        legend="Наличие пострадавших";
        switcher("Есть пострадавшие?", "Да");
        input("Из них погибших", "7");

        legend="Сведения об инциденте";
        date("Дата инцидента", "01.01.2015");
        input("Время инцидента (МСК)", "1000");
        input("Хозяйственное образование", "ТестИзменениеИнцидентаХозОбразование");
        select("Территориальный орган Ростехнадзора", 4);
        select("Вид надзора", 2);
        select("Структурное подразделение", 0);

        legend="Место инцидента";
        input("Производство, участок, цех", data = "ТестСозданиеИзменениеПроизводствоУчастокЦех" + curDate());
        input("Координаты по трассе с привязкой к нас. пункту", "ТестИзменениеИнцидентаКоординатыПоТрассе");
        input("Обстоятельства инцидента", "ТестИзменениеИнцидентаОбстоятельстаИнцидента");
        switcher("Вовремя ли подана информация об инциденте (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "ТестИзменениеИнцидентаПричинаЗадержки");

        legend="Объекты, на которых произошел инцидент";
        select("Объект", 2);
        select("Техническое устройство", 1);

        legend="Ликвидирующие организации";
        input("Наименование организации", "ТестИзменениеИнцидентаЛиквидирующаяОрганизация");

        legend="Кто сообщил об инциденте";
        label("Сотрудник");
        select("Сотрудник", 0);

        legend="Данные лица, принявшего сообщение об инциденте";
        input("Ф.И.О.", "ТестИзменениеИнцидентаФИО");
        input("Должность", "ТестИзменениеИнцидентаДолжность");
        date("Дата", "01.01.2015");
        input("Время (МСК)", "1100");

        save();
        messageResultOfOperation("инцидент");

        legend="";
        button("Перейти на страницу инцидента");

        goTo("Инциденты", "Инцидент");
        selectRow(0);
        assertEquals(revisionValue("Место инцидента"), data,"Инцидент не изменен");
    }

    @Test(priority=2, groups = { "empty","edit" })
    public void testEditEmpty() throws Exception
    {
        expected_result=false;
        selectRow(0);
        edit();

        legend="Вид инцидента";
        unselect("Вид");


        legend="Сведения об инциденте";
        input("Дата инцидента", "");
        input("Время инцидента (МСК)", "");
        unselect("Вид надзора");

        legend="Место инцидента";
        input("Производство, участок, цех", "");
        input("Обстоятельства инцидента", "");
        switcher("Вовремя ли подана информация об инциденте (в течение 24-х часов)?", "Нет");
        input("Причина задержки", "");

        legend="Объекты, на которых произошел инцидент";
        unselect("Объект");

        legend="Ликвидирующие организации";
        button("Добавить");
        input("Наименование организации", "");

        save();
        messageResultOfOperation("инцидент");

        String[] s=checkEmptyFields();
        assertTrue(s.length == 0, "Есть обязательные поля, не подсвеченные как обязательные:\n" + Arrays.asList(s) + "\n" + (s.length == 0 ? "" : getScreenshot("fail")));
    }

    @Test(priority=5, groups = { "delete" })
    public void testDelete() throws Exception
    {
        operation="удаление";
        selectRow(0);
        legend="Оперативное сообщение";
        data = revisionValue("Место инцидента (производство, участок, цех)");
        delete();

        messageResultOfOperation("инцидент");

        goTo("Инциденты", "Инциденты");
        if (!MOWebdriver.isListEmpty()) {
            selectRow(0);
            assertNotEquals(revisionValue("Место инцидента (производство, участок, цех)"), data, "Инцидент не удален!");
        }
    }
}
